akka {
  actor {
    provider = cluster
  }

  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery {
    enabled = on
    transport = tcp
    canonical.port = 0
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = [
      "akka://ShardingSystem@127.0.0.1:2551",
      "akka://ShardingSystem@127.0.0.1:2552"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    auto-down-unreachable-after = 10s
  }
}



//akka {
//  loggers = ["akka.event.slf4j.Slf4jLogger"]
//}
//
//akka {
//  stdout-loglevel = INFO
//  loglevel = INFO
//}

redis-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-factor = 3.0
    core-pool-size-max = 16
    max-pool-size-factor = 8.0
    max-pool-size-max = 128
  }
  throughput = 1
}

cinnamon.chmetrics {
  reporters += "console-reporter"
}

cinnamon.prometheus {
  exporters += http-server

  http-server.port = 9001
  http-server.port = ${?PROMETHEUS_PORT}

  summary {
    max-age = 10s
    age-buckets = 2
  }
}

cinnamon.akka.dispatchers {
  basic-information {
    names = ["*"]
  }
  time-information {
    names = ["redis-dispatcher"] //, "http-dispatcher", "background-dispatcher", "kinesis-input-dispatcher"]
  }
}

redis-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-factor = 3.0
    core-pool-size-max = 16
    max-pool-size-factor = 8.0
    max-pool-size-max = 128
  }
  throughput = 1
}

